[{"ID":"stu3", "width":100,"length":110,"NumberOfSensors":5,"SensorSpacing":15,"BodyColour":"ffffff","WheelColour":"014700","LEDColour":"red","Code":"int error = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -2;\n    else if(an[1] > black_threshold)\n        error = -1;\n    else if(an[2]>  black_threshold) \n        error = 0;\n    else if(an[3] > black_threshold)\n        error = 1;\n    else if(an[4] > black_threshold)   \n        error = 2;\n\tSet_PWM(0, 350 + error*300);\n\tSet_PWM(1, 350 - error*300);\n}\n\t\t\t"}, 
{"ID":"stu21", "width":106,"length":116,"NumberOfSensors":4,"SensorSpacing":18,"BodyColour":"ffffff","WheelColour":"000000","LEDColour":"blue","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -4;\n    else if(an [0] > black_threshold && an[1] > black_threshold)\n        error = -2;\n    else if(an[1] > black_threshold)\n        error = -1;\n    else if(an [1] > black_threshold && an [2] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n    else if(an[2] > black_threshold && an[3] > black_threshold)\n        error = 2;\n    else if(an[3] > black_threshold)\n        error = 4;\n        \n\tSet_PWM(0, 1800 + error*1500 + 1900*(error - lastError));\n\tSet_PWM(1, 1800 - error*1500 - 1900*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu40", "width":90,"length":90,"NumberOfSensors":4,"SensorSpacing":10,"BodyColour":"007a3f","WheelColour":"014700","LEDColour":"green","Code":"int error = 0; \nint  lastError = 0; \n\nvoid  RobotControl() \n{\n     if(an[0] > black_threshold && an[1] > black_threshold)\n         error = -2 ;\n     else if(an[1] > black_threshold && an[2] > black_threshold)\n         error = 0;\n     else if(an[2] > black_threshold && an[3] > black_threshold)\n         error = 2;\n \n         \n\tSet_PWM(0,1000 + error*800 + 1800*(error - lastError)); \n\tSet_PWM(1,1000 - error*800 - 1800*(error - lastError)); \n\t\n\tlastError = error; \n}"}, 
{"ID":"stu17", "width":83,"length":93,"NumberOfSensors":2,"SensorSpacing":17,"BodyColour":"f1c9fe","WheelColour":"444444","LEDColour":"yellow","Code":"void RobotControl(){\nif (an[0] > black_threshold && an[1] > black_threshold)\n{\nSet_PWM(0, 350); // Motor 0 (Left)\nSet_PWM(1, 350); // Motor 1 (Right)\n}\nif (an[0] > black_threshold && an[1] <= black_threshold)\n{\nSet_PWM(0, 100); // Motor 0 (Left)\nSet_PWM(1, 400); // Motor 1 (Right)\n}\nif (an[0] <= black_threshold && an[1] > black_threshold)\n{\nSet_PWM(0, 400); // Motor 0 (Left)\nSet_PWM(1, 100); // Motor 1 (Right)\n}\n}"}, 
{"ID":"stu7", "width":144,"length":175,"NumberOfSensors":10,"SensorSpacing":12,"BodyColour":"b51a00","WheelColour":"014700","LEDColour":"green","Code":"int error = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -7;\n    else if(an[1] > black_threshold)\n        error = -6;\n    else if(an[2]>  black_threshold) \n        error = -5;\n    else if(an[3] > black_threshold)\n        error = -3;\n    else if(an[4] > black_threshold)   \n        error = 0;\n    else if(an[5] > black_threshold)   \n        error = 0;\n    else if(an[6] > black_threshold)   \n        error = 3;\n    else if(an[7] > black_threshold)\n        error = 5;\n    else if(an[8] > black_threshold)\n        error = 6;\n    else if(an[9] > black_threshold)\n        error = 7;\n\tSet_PWM(0, 600 + error*700);\n\tSet_PWM(1, 600 - error*700);\n}\n\t\t\t"}, 
{"ID":"stu12", "width":175,"length":176,"NumberOfSensors":5,"SensorSpacing":17,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"int Error=0;\r\nint LastError=0;\r\nint Kp=1900;\r\nint Kd=20000;\r\nint MotorSpeed;\r\nint RightMotorSpeed;\r\nint RightBaseSpeed=4000;\r\nint LeftMotorSpeed;\r\nint LeftBaseSpeed=4000;\r\nvoid RobotControl()\r\n{\r\n\r\n//00001\r\nif((an[0]<=black_threshold)&&(an[1]<=black_threshold)&&(an[2]<=black_threshold)&&(an[3]<=black_threshold)&&(an[4]>black_threshold))\r\n{    \r\n\tError = -4;\r\n}\r\n//00011\r\nelse if((an[0]<=black_threshold)&&(an[1]<=black_threshold)&&(an[2]<=black_threshold)&&(an[3]>black_threshold)&&(an[4]>black_threshold))\r\n{\r\n    Error = -3;\r\n}\r\n//00010\r\nelse if((an[0]<=black_threshold)&&(an[1]<=black_threshold)&&(an[2]<=black_threshold)&&(an[3]>black_threshold)&&(an[4]<=black_threshold))\r\n{\r\n\tError = -2;\r\n}\r\n//00110\r\nelse if((an[0]<=black_threshold)&&(an[1]<=black_threshold)&&(an[2]>black_threshold)&&(an[3]>black_threshold)&&(an[4]<=black_threshold))\r\n{\r\n\tError = -1;\r\n}\r\n//00100\r\nelse if((an[0]<=black_threshold)&&(an[1]<=black_threshold)&&(an[2]>black_threshold)&&(an[3]<=black_threshold)&&(an[4]<=black_threshold))\r\n{\r\n\tError = 0;\r\n}\r\n//01100\r\nelse if((an[0]<=black_threshold)&&(an[1]>black_threshold)&&(an[2]>black_threshold)&&(an[3]<=black_threshold)&&(an[4]<=black_threshold))\r\n{\r\n\tError = 1;\r\n}\r\n//01000\r\nelse if((an[0]<=black_threshold)&&(an[1]>black_threshold)&&(an[2]<=black_threshold)&&(an[3]<=black_threshold)&&(an[4]<=black_threshold))\r\n{\r\n\tError = 2;\r\n}\r\n//11000\r\nelse if((an[0]>black_threshold)&&(an[1]>black_threshold)&&(an[2]<=black_threshold)&&(an[3]<=black_threshold)&&(an[4]<=black_threshold))\r\n{\r\n\tError = 3;\r\n}\r\n//10000\r\nelse if((an[0]>black_threshold)&&(an[1]<=black_threshold)&&(an[2]<=black_threshold)&&(an[3]<=black_threshold)&&(an[4]<=black_threshold)) \r\n{\r\n\tError = 4;\r\n}\r\n\r\nMotorSpeed = (Kp*Error) + Kd*(Error-LastError );\r\nLastError = Error;\r\nRightMotorSpeed = RightBaseSpeed + MotorSpeed;\r\nLeftMotorSpeed = LeftBaseSpeed - MotorSpeed;\r\n\r\nSet_PWM(0, LeftMotorSpeed);\r\nSet_PWM(1, RightMotorSpeed);\r\n}"}, 
{"ID":"stu70", "width":70,"length":160,"NumberOfSensors":4,"SensorSpacing":15,"BodyColour":"6a1506","WheelColour":"1ed961","LEDColour":"yellow","Code":"void RobotControl()\n{\n\tif(an[0] > black_threshold && an[1] > black_threshold && an[2] <= black_threshold && an[3] <= black_threshold) {\n\t\tSet_PWM(0, 200);    // Motor 0 slow\n\t\tSet_PWM(1, 400);    // Motor 1 fast\n\t}\n\t\n\tif(an[0] > black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] <= black_threshold) {\n\t\tSet_PWM(0, 0);\t    // Motor 0 slow\n\t\tSet_PWM(1, 600);    // Motor 1 fast\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] > black_threshold && an[2] > black_threshold && an[3] <= black_threshold) {\n\t\tSet_PWM(0, 600);\t// Motor 0 \n\t\tSet_PWM(1, 600);    // Motor 1\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] > black_threshold && an[2] <= black_threshold && an[3] <= black_threshold) {\n\t\tSet_PWM(0, 250);\t// Motor 0 slow\n\t\tSet_PWM(1, 400);    // Motor 1 fast\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold && an[3] > black_threshold) {\n\t\tSet_PWM(0, 350);\t// Motor 0 fast\n\t\tSet_PWM(1, 50);     // Motor 1 slow\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold && an[3] <= black_threshold) {\n\t\tSet_PWM(0, 400);\t// Motor 0 fast\n\t\tSet_PWM(1, 100);    // Motor 1 slow\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] > black_threshold) {\n\t\tSet_PWM(0, 600);\t// Motor 0 fast\n\t\tSet_PWM(1, 0);      // Motor 1 slow\n\t}\n}\n\t\t\t"}, 
{"ID":"stu14", "width":150,"length":150,"NumberOfSensors":3,"SensorSpacing":20,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"yellow","Code":"void RobotControl()\n{\n\tif(an[0] > black_threshold && an[1] > black_threshold && an[2] <= black_threshold) { \n\t    Set_PWM(0, 150);\n\t    Set_PWM(1, 450);\n}\n\t\t\tif(an[0] > black_threshold && an[1] <= black_threshold && an[2] <= black_threshold) {\n\t\t\t    Set_PWM(0, 100);\n\t\t\t    Set_PWM(1, 600);\n\t\t\t}\n\t\t\tif(an[0] <= black_threshold && an[1] > black_threshold && an[2] > black_threshold) {\n\t\t\t    Set_PWM(0, 450);\n\t\t\t    Set_PWM(1, 150);\n\t\t\t}\n\t\t\tif(an[0] <= black_threshold && an[1] > black_threshold && an[2] <= black_threshold) {\n\t\t\t    Set_PWM(0, 350);\n\t\t\t    Set_PWM(1, 350);\n\t\t\t}\n\t\t\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold) {\n\t\t\t    Set_PWM(0, 600);\n\t\t\t    Set_PWM(1, 100);\n\t\t\t}\n}"}, 
{"ID":"stu29", "width":120,"length":120,"NumberOfSensors":4,"SensorSpacing":20,"BodyColour":"000000","WheelColour":"7a0000","LEDColour":"red","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n    error = -3;\n    else if(an[1] > black_threshold)\n    error = -1.5;\n    else if(an[2] > black_threshold)\n    error = 1.5;\n    else if(an[3] > black_threshold)\n    error = 3;\n    \n    Set_PWM(0, 1100 + error*800 + 2000*(error - lastError));\n    Set_PWM(1, 1100 - error*800 - 2000*(error - lastError));\n    \n    lastError = error;\n}"}, 
{"ID":"stu5", "width":100,"length":100,"NumberOfSensors":4,"SensorSpacing":15,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"float error = 0;\nfloat lastError = 0;\n\n// Values use for calulating the speed\nint ErrGain = 4000;\nint ErrDiffGain = 9000;\nint Speed = 3500;\n\nvoid RobotControl()\n{\n    if(an[1] > black_threshold && an[2] > black_threshold){\n        error = 0;\n    }else if(an[0] > black_threshold){\n        error = -3;\n    }else if(an[1] > black_threshold){\n        error = -1.5;\n    }else if(an[2] > black_threshold){\n        error = 1.5;\n    }else if(an[3] > black_threshold)\n        error = 3;    \n  \n\tSet_PWM(0,Speed + error*ErrGain + ErrDiffGain*(error - lastError));\n\tSet_PWM(1,Speed - error*ErrGain - ErrDiffGain*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu13", "width":150,"length":150,"NumberOfSensors":7,"SensorSpacing":15,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"    int error = 0;\r\n    int lastError = 0;\r\nvoid RobotControl()  { \r\n \r\n  if(an[0] > black_threshold)        \r\n  error = -3;\r\n  else\r\n  if(an[1] > black_threshold)        \r\n  error = -2;\r\n  else\r\n  if(an[2] > black_threshold)       \r\n  error = -1;   \r\n  else \r\n  if(an[3] > black_threshold)        \r\n  error = 0;    \r\n  else \r\n  if(an[4] > black_threshold)        \r\n  error = 1; \r\n  else\r\n  if(an[5] > black_threshold)        \r\n  error = 2;\r\n  else\r\n  if(an[6] > black_threshold)        \r\n  error = 3;\r\n  \r\n  Set_PWM(0, 600 + error*300 + 900*(error - lastError));\r\n  Set_PWM(1, 600 - error*300 - 900*(error - lastError));\r\n  \r\n  lastError = error; \r\n      \r\n  }"},
{"ID":"stu72", "width":160, "length":127, "NumberOfSensors":3, "SensorSpacing":20, "BodyColour":"cddaea", "WheelColour":"444444", "LEDColour":"blue", "Code":" void RobotControl()\n{\n\tif (an[0] > black_threshold && an[1] > black_threshold && an[2] <= black_threshold)\n\t{\n\t\t Set_PWM(0, 100);\t\t\n\t\t Set_PWM(1, 600);\t\n\t}\n\tif  (an[0] > black_threshold && an[1] <= black_threshold && an[2] <= black_threshold)\n\t{\n\t     Set_PWM(0, 0); \n\t     Set_PWM(1, 700); \n\t}\n\tif  (an[0] <= black_threshold && an[1] > black_threshold && an[2] > black_threshold)\n\t{\n\t     Set_PWM(0, 600); \n\t     Set_PWM(1, 100); \n\t}\n\tif  (an[0] <= black_threshold && an[1] > black_threshold && an[2] <= black_threshold)\n\t{\n\t     Set_PWM(0, 350);\n\t     Set_PWM(1, 350);\n\t}\n\tif (an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold)\n\t{\n\t     Set_PWM(0, 700);\n\t     Set_PWM(1, 0);\n\t}\n\t    \n}\n\t\t\t"}, 
{"ID":"stu75", "width":144,"length":180,"NumberOfSensors":10,"SensorSpacing":12,"BodyColour":"feb43f","WheelColour":"000000","LEDColour":"yellow","Code":"int error = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -7;\n    else if(an[1] > black_threshold)\n        error = -6;\n    else if(an[2]>  black_threshold) \n        error = -5;\n    else if(an[3] > black_threshold)\n        error = -4;\n    else if(an[4] > black_threshold)   \n        error = 0;\n    else if(an[5] > black_threshold)   \n        error = 0;\n    else if(an[6] > black_threshold)   \n        error = 4;\n    else if(an[7] > black_threshold)\n        error = 5;\n    else if(an[8] > black_threshold)\n        error = 6;\n    else if(an[9] > black_threshold)\n        error = 7;\n\tSet_PWM(0, 600 + error*700);\n\tSet_PWM(1, 600 - error*700);\n}\n\t\t\t"}, 
{"ID":"stu81", "width":103,"length":103,"NumberOfSensors":5,"SensorSpacing":10,"BodyColour":"cf5520","WheelColour":"000000","LEDColour":"blue","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -11;\n    else if(an[1] > black_threshold)\n        error = -9;\n    else if(an[2] > black_threshold)\n        error = 0;\n    else if(an[3] > black_threshold)\n        error = 9;\n    else if(an[4] > black_threshold)\n        error =11;\n        \n\tSet_PWM(0, 2000 + error*360 + 940*(error - lastError));\n\tSet_PWM(1, 2000 - error*360 - 940*(error - lastError));\n\t\n\tlastError = error;\n}\n\n\t\t\t\t\t"}, 
{"ID":"stu18", "width":175,"length":150,"NumberOfSensors":5,"SensorSpacing":22,"BodyColour":"ec790e","WheelColour":"444444","LEDColour":"blue","Code":"\n  int error = 0;\n  int lastError = 0;\n  \n  void RobotControl() \n  { \n \n  if(an[0] > black_threshold)        \n  error = -2;\n  else\n  if(an[1] > black_threshold)       \n  error = -1;   \n  else \n  if(an[2] > black_threshold)        \n  error = 0;    \n  else \n  if(an[3] > black_threshold)        \n  error = 1; \n  else\n  if(an[4] > black_threshold)        \n  error = 2;\n  \n  Set_PWM(0, 550 + error*300 + 900*(error - lastError));\n  Set_PWM(1, 550 - error*300 - 900*(error - lastError));\n  \n  lastError = error; \n      \n  }\n\n"}, 
{"ID":"stu46", "width":68,"length":124,"NumberOfSensors":3,"SensorSpacing":30,"BodyColour":"20cccf","WheelColour":"454545","LEDColour":"red","Code":"void RobotControl() \n{ \n    if(an[0] <= black_threshold && an[1]>black_threshold && an[2]<=black_threshold)\n    {\n        Set_PWM(0,350);\n        Set_PWM(1,350);\n    }else if (an[0]>black_threshold && an[1]<=black_threshold && an[2]<=black_threshold)\n    {\n        Set_PWM(0,200);\n        Set_PWM(1,700);\n    }else if(an[0]>black_threshold && an[1]>black_threshold && an[2]<=black_threshold)\n    {\n        Set_PWM(0,200);\n        Set_PWM(1,350);\n    } else if(an[0]<=black_threshold && an[1]>black_threshold && an[2]>black_threshold)\n    {\n        Set_PWM(0,350);\n        Set_PWM(1,200);\n    } else if(an[0]<=black_threshold && an[1]<=black_threshold && an[2]>black_threshold)\n    {\n        Set_PWM(0,350);\n        Set_PWM(1,200);\n    }else if(an[0]<=black_threshold && an[1]<=black_threshold && an[2]<=black_threshold)\n    {\n        Set_PWM(0,350);\n        Set_PWM(1,3);\n    }\n}\t\n\n\n\t\t\t"}, 
{"ID":"stu52", "width":150,"length":150,"NumberOfSensors":5,"SensorSpacing":10,"BodyColour":"cf3b20","WheelColour":"444444","LEDColour":"red","Code":" void RobotControl()\r\n{\tif(an[0] > black_threshold && an[1] < black_threshold )\r\n\t{       Set_PWM(0, 20);\t\t// Motor 0 slow\r\n\t\tSet_PWM(1, 420);\t// Motor 1 fast\r\n\t}\r\n\tif(an[0] < black_threshold && an[1] > black_threshold )\r\n\t{\tSet_PWM(0, 420);\t\t// Motor 0 fast\r\n\t\tSet_PWM(1, 20);\t// Motor 1 slow\r\n\t}\r\n\tif(an[0] > black_threshold && an[1] > black_threshold )\r\n\t{\r\n\t\tSet_PWM(0, 360);\t\t// Motor 0 fast\r\n\t\tSet_PWM(1, 360);\t// Motor 1 fast\r\n\t}}"}, 
{"ID":"stu35", "width":145,"length":190,"NumberOfSensors":5,"SensorSpacing":12,"BodyColour":"5e1212","WheelColour":"000000","LEDColour":"green","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -6;\n    else if(an[1] > black_threshold)\n        error = -3;\n    else if(an[2] > black_threshold)\n        error = 0;\n    else if(an[3] > black_threshold)\n        error = 3;\n    else if(an[4] > black_threshold)\n        error = 6;\n        \n\tSet_PWM(0, 800 + error*600 + 1800*(error - lastError));\n\tSet_PWM(1, 800 - error*600 - 1800*(error - lastError));\n\t\n\tlastError = error;\n}\t\t"}, 
{"ID":"stu25", "width":100,"length":107,"NumberOfSensors":3,"SensorSpacing":15,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"green","Code":"float error = 0;\r\n\r\nfloat lastError = 0;\r\n\r\n\r\nvoid RobotControl()\r\n\r\n{\r\n    if(an[0] > black_threshold)\r\n     \r\n        error = -1;\r\n \r\n\r\n   else if(an[1] > black_threshold)\r\n  \r\n         error = 0;\r\n \r\n \r\n   else if(an[2] > black_threshold)\r\n      \r\n         error = 1;\r\n     \r\n   \r\n\t\r\n        Set_PWM(0, 1190 + error*1850 + 3890*(error - lastError));\r\n\r\n\tSet_PWM(1, 1190 - error*1850 - 3890*(error - lastError));\r\n\t\r\n\r\n\t\r\n          lastError = error;\r\n\r\n}\r\n"}, 
{"ID":"stu49", "width":100,"length":96,"NumberOfSensors":3,"SensorSpacing":22,"BodyColour":"5ab021","WheelColour":"050505","LEDColour":"red","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n      \n\tSet_PWM(0, 1000 + error*1400 + 4200*(error - lastError));\n\tSet_PWM(1, 1000 - error*1400 - 4200*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu61", "width":131,"length":168,"NumberOfSensors":3,"SensorSpacing":21,"BodyColour":"20cf5e","WheelColour":"454545","LEDColour":"red","Code":"void RobotControl()\n{\n    if(an[0] > black_threshold && an[1] > black_threshold && an[2] <= black_threshold)\n\t{\n\t\tSet_PWM(0, 100);\t\t\n\t\tSet_PWM(1, 500);\t\n\t}\n\tif(an[0] > black_threshold && an[1] <= black_threshold && an[2] <= black_threshold)\n\t{\n\t\tSet_PWM(0, 28);\t\n\t\tSet_PWM(1, 605);\t\n\t}\n    if(an[0] <= black_threshold && an[1] > black_threshold && an[2] > black_threshold)\n    {\n        Set_PWM(0, 500);\n        Set_PWM(1, 100);\n    }\n\tif(an[0] <= black_threshold && an[1] > black_threshold && an[2] <= black_threshold)\n\t{\n\t    Set_PWM(0, 750);\n\t    Set_PWM(1, 750);\n\t}\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold)\n\t{\n\t    Set_PWM(0,605);\n\t    Set_PWM(1, 28);\n\t}\n}\t"}, 
{"ID":"stu2", "width":144,"length":175,"NumberOfSensors":10,"SensorSpacing":12,"BodyColour":"0f0156","WheelColour":"e2f202","LEDColour":"red","Code":"int error = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -7;\n    else if(an[1] > black_threshold)\n        error = -6;\n    else if(an[2]>  black_threshold) \n        error = -5;\n    else if(an[3] > black_threshold)\n        error = -3;\n    else if(an[4] > black_threshold)   \n        error = 0;\n    else if(an[5] > black_threshold)   \n        error = 0;\n    else if(an[6] > black_threshold)   \n        error = 3;\n    else if(an[7] > black_threshold)\n        error = 5;\n    else if(an[8] > black_threshold)\n        error = 6;\n    else if(an[9] > black_threshold)\n        error = 7;\n\tSet_PWM(0, 600 + error*700);\n\tSet_PWM(1, 600 - error*700);\n}\n\t\t\t"}, 
{"ID":"stu11", "width":150,"length":175,"NumberOfSensors":9,"SensorSpacing":15,"BodyColour":"fafafa","WheelColour":"444444","LEDColour":"red","Code":"int error = 0;\nint lastError = 0;\n  void RobotControl()\n  {\n  if(an[0] > black_threshold)        \n  error = -4;    \n  else \n  if(an[1] > black_threshold)        \n  error = -3;    \n  else \n  if(an[2] > black_threshold)        \n  error = -2;    \n  else \n  if(an[3] > black_threshold)        \n  error = -1;    \n  else \n  if(an[4] > black_threshold)        \n  error = 0;    \n  else \n  if(an[5] > black_threshold)        \n  error = 1;\n  else\n  if(an[6] > black_threshold)        \n  error = 2;\n  else\n  if(an[7] > black_threshold)        \n  error = 3;\n  else\n  if(an[8] > black_threshold)        \n  error = 4;\n  Set_PWM(0, 700 + error*300 + 900*(error - lastError));\n  Set_PWM(1, 700 - error*300 - 900*(error - lastError));\n  lastError = error;\n    \n  }"}, 
{"ID":"stu22", "width":100,"length":150,"NumberOfSensors":3,"SensorSpacing":22,"BodyColour":"000e16","WheelColour":"014700","LEDColour":"yellow","Code":"int error = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n        \n\tSet_PWM(0, 450 + error*900);\n\tSet_PWM(1, 450 - error*900);\n}\n\t\t\t"}, 
{"ID":"stu56", "width":50,"length":100,"NumberOfSensors":4,"SensorSpacing":10,"BodyColour":"6b6b6b","WheelColour":"0ff90b","LEDColour":"green","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -10;\n    else if(an[1] > black_threshold)\n        error = -5;\n    else if(an[2] > black_threshold)\n        error = 5;\n     else if(an[3] > black_threshold)\n        error = 10;\n        \n\tSet_PWM(0, 3000 + error*200 + 900*(error - lastError));\n\tSet_PWM(1, 3000 - error*200 - 900*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu63", "width":50,"length":153,"NumberOfSensors":4,"SensorSpacing":15,"BodyColour":"02f7e7","WheelColour":"0905fa","LEDColour":"blue","Code":"int error = 0;\nint lastError = 1;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -2; \n        \n    else if(an[1] > black_threshold)\n        error = -1;\n        \n    else if(an[2] > black_threshold)\n        error = 1;\n   \n   else if(an[3] > black_threshold)\n        error = 2;\n        \n\tSet_PWM(0, 450 + error*400 + 750*\n\t(error - lastError)); // Motor 0 (Left)\n\tSet_PWM(1, 450 - error*400 - 750*\n\t(error - lastError)); // Motor 1 (Right\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu20", "width":76,"length":124,"NumberOfSensors":2,"SensorSpacing":10,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"void RobotControl()\n{\n\tif(an[0] > black_threshold && an[1] > black_threshold)\n\t{\n\t\tSet_PWM(0, 200);\t\t// Motor 0 slow\n\t\tSet_PWM(1, 200);\t// Motor 1 fast\n\t}\n\tif(an[0] > black_threshold && an[1] <= black_threshold)\n\t{\n\t\tSet_PWM(0, 50);\t\t// Motor 0 slow\n\t\tSet_PWM(1, 250);\t// Motor 1 fast\n\t}\n\tif(an[0] <= black_threshold && an[1] > black_threshold)\n\t{\n\t\tSet_PWM(0, 250);\t\t// Motor 0 slow\n\t\tSet_PWM(1, 50);\t// Motor 1 fast\n\t}\n}\n\t\t\t"}, 
{"ID":"stu73", "width":69,"length":90,"NumberOfSensors":2,"SensorSpacing":15,"BodyColour":"205ecf","WheelColour":"ffffff","LEDColour":"blue","Code":"void RobotControl()\n{\n    if (an[0] > black_threshold && an[1] > black_threshold)\n    {\n        Set_PWM(0, 700);            \n        Set_PWM(1, 700);\n    }   \n     if (an[0] > black_threshold && an[1] <= black_threshold)\n    {\n        Set_PWM(0, 100);\n        Set_PWM(1, 350);\n    }       \n     if (an[0] <= black_threshold &&  an[1] > black_threshold)\n    {\n        Set_PWM(0, 350);\n        Set_PWM(1, 100);\n    }       \n}   "}, 
{"ID":"stu67", "width":131,"length":120,"NumberOfSensors":5,"SensorSpacing":10,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"void RobotControl(){\r\n\tif(an[0] > black_threshold  && an[1] > black_threshold)\r\n\t{\r\n\t\tSet_PWM(0, -600);\t\t// Motor 0 (Left) slow\r\n\t\tSet_PWM(1, 900);\t// Motor 1 (Right) fast\r\n\t}\r\n\t\tif (an[1] > black_threshold  && an[2] > black_threshold)\r\n        {\r\n          Set_PWM(0, 600);\r\n          Set_PWM(1, 900);\r\n        }\r\n          if (an[2] > black_threshold)\r\n          {\r\n            Set_PWM(0, 950);\r\n            Set_PWM(1, 950);\r\n          } \r\n            if (an[3] > black_threshold && an[2] > black_threshold)\r\n            {\r\n              Set_PWM(0, 900);\r\n              Set_PWM(1, 600);\r\n            } \r\n            if (an[4] > black_threshold && an[3] > black_threshold)\r\n            {\r\n              Set_PWM(0, 900);\r\n              Set_PWM(1, -600);\r\n\t        }  \r\n}"}, 
{"ID":"stu50", "width":65,"length":120,"NumberOfSensors":9,"SensorSpacing":20,"BodyColour":"20c4cf","WheelColour":"1ec823","LEDColour":"red","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -4;\n    else if(an[1] > black_threshold && an[0] > black_threshold)\n        error = -3.5;\n    else if(an[1] > black_threshold)\n        error = -3;\n    else if(an[1] > black_threshold && an[2] > black_threshold)\n        error = -2.5;\n    else if(an[2] > black_threshold)\n        error = -2;\n    else if(an[2] > black_threshold && an[3] > black_threshold)\n        error = -1.5;\n    else if(an[3] > black_threshold)\n        error = -1;\n    else if(an[3] > black_threshold && an[4] > black_threshold)\n        error = -0.5;\n    else if(an[4] > black_threshold)\n        error = 0;\n    else if(an[4] > black_threshold && an[5] > black_threshold)\n        error = 0.5;\n    else if(an[5] > black_threshold)\n        error = 1;\n    else if(an[5] > black_threshold && an[6] > black_threshold)\n        error = 1.5;\n    else if(an[6] > black_threshold)\n        error = 2;\n    else if(an[6] > black_threshold && an[7] > black_threshold)\n        error = 2.5;\n    else if(an[7] > black_threshold)\n        error = 3;\n        else if(an[7] > black_threshold && an[8] > black_threshold)\n        error = 3.5;\n    else if(an[8] > black_threshold)\n        error = 4;\n        \n        \n        \n        \n        \n\tSet_PWM(0, 9000 + error*8900 + 26700*(error - lastError));\n\tSet_PWM(1, 9000 - error*8900 - 26700*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t\t\t"}, 
{"ID":"stu26", "width":148,"length":177,"NumberOfSensors":5,"SensorSpacing":16,"BodyColour":"fbff29","WheelColour":"444444","LEDColour":"green","Code":"int lastError=0;\nint error=0;\nvoid RobotControl()\n{\n\tif(an[0] > black_threshold){\n\t    error = -4;\n\t}\n\tif(an[1] > black_threshold){\n\t    error = -2;\n\t}\n\tif(an[2] > black_threshold){\n\t    error = 0;\n\t}\n\tif(an[3] > black_threshold){\n\t    error = 2;\n\t}\n\tif(an[4] > black_threshold){\n\t    error = 4;\n\t}\n\tSet_PWM(0, 570 + 360 * error + 280 * (error-lastError));\n\tSet_PWM(1, 570 - 360 * error - 280 * (error-lastError));\n\tlastError=error;\n}\n\t\t\t"}, 
{"ID":"stu77", "width":80,"length":90,"NumberOfSensors":3,"SensorSpacing":20,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"int error;\nint lastError;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n        \n    Set_PWM(0, 850 + error*800 + 1550*(error - lastError));\n    Set_PWM(1, 850 - error*800 - 1550*(error - lastError));\n    \n    lastError = error;\n}"}, 
{"ID":"stu24", "width":115,"length":120,"NumberOfSensors":5,"SensorSpacing":18,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"yellow","Code":"// Robot specifications\n// length = 120 mm, width = 115 mm, sensor spacing = 18 mm, number of sensors = 5\n\nfloat lastError = 0;        // initializing last error\nvoid RobotControl()\n{\n    float error;            // to store current error\n \n    // PD parameters\n    int A, B, C;\n    float PDout_m1, PDout_m2;\n    \n    if(an[0] > black_threshold){    // robot completely out of the line \n        error = -2;                 // from its left\n    }\n    else if(an[1] > black_threshold){ // robot position its left from centre\n        error = -1;\n    }\n    else if(an[2] > black_threshold){ // robot is on the line\n        error = 0;\n    }\n    else if(an[3] > black_threshold){ // robot position its right from centre  \n        error = 1;\n    }\n    else if(an[4] > black_threshold){ // robot completely out of the line\n        error = 2;                    // from its right    \n    }\n    \n    // PD controller\n    A = 1150; B = 1100; C = 3200;\n    PDout_m1 = A + error*B + C*(error-lastError);\n    PDout_m2 = A - error*B - C*(error-lastError);\n    \n    // Setting motors speed\n    Set_PWM(0,PDout_m1);\n    Set_PWM(1,PDout_m2);\n    \n    // update last error\n    lastError = error;\n}\n\n"}, 
{"ID":"stu10", "width":147,"length":150,"NumberOfSensors":6,"SensorSpacing":16,"BodyColour":"20cf5e","WheelColour":"ffffff","LEDColour":"green","Code":"float lastError = 0;\r\nvoid RobotControl()\r\n{\r\nif(an[0] > black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] <= black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 50);\r\nSet_PWM(1, 750);\r\n}\r\n\r\nif(an[0] > black_threshold && an[1] > black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] <= black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 100);\r\nSet_PWM(1, 600);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] > black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] <= black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 50);\r\nSet_PWM(1, 700);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] > black_threshold && an[2] > black_threshold && an[3] <= black_threshold && an[4] <= black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 150);\r\nSet_PWM(1, 700);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold && an[3] <= black_threshold && an[4] <= black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 150);\r\nSet_PWM(1, 700);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold && an[3] > black_threshold && an[4] <= black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 705);\r\nSet_PWM(1,705);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] > black_threshold && an[4] <= black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 700);\r\nSet_PWM(1, 150);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] > black_threshold && an[4] > black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 700);\r\nSet_PWM(1, 150);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] > black_threshold && an[5] <= black_threshold) {\r\nSet_PWM(0, 600);\r\nSet_PWM(1, 50);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] > black_threshold && an[5] > black_threshold) {\r\nSet_PWM(0, 600);\r\nSet_PWM(1, 100);\r\n}\r\n\r\nif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] <= black_threshold && an[5] > black_threshold) {\r\nSet_PWM(0, 750);\r\nSet_PWM(1, 50);\r\n}\r\n\r\n}"}, 
{"ID":"stu44", "width":55,"length":110,"NumberOfSensors":3,"SensorSpacing":13,"BodyColour":"ed702d","WheelColour":"ed702d","LEDColour":"red","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n        \n\tSet_PWM(0, 1600 + error* 1500 + 4200*(error - lastError));\n\tSet_PWM(1, 1600 - error* 1500 - 4200*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu69", "width":90,"length":110,"NumberOfSensors":3,"SensorSpacing":15,"BodyColour":"20cf8c","WheelColour":"df2626","LEDColour":"red","Code":"int error=0;\r\nint lastError=0;\r\n\r\nvoid RobotControl()\r\n{\r\n    if(an[0] > black_threshold)\r\n        error=-1;\r\n    else if(an[1] > black_threshold)\r\n        error=0;\r\n    else if(an[2] > black_threshold)\r\n         error=1;\r\n    \r\n    Set_PWM(0, 900 + error*750 + 2250* (error - lastError));\r\n    Set_PWM(1, 900 - error*750 - 2250* (error - lastError));\r\n    \r\n    lastError = error;\r\n}\r\n\r\n\t"}, 
{"ID":"stu65", "width":100,"length":100,"NumberOfSensors":3,"SensorSpacing":10,"BodyColour":"0199e7","WheelColour":"1d00ff","LEDColour":"blue","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n        \n\tSet_PWM(0, 792 + error*1100 + 1100*(error - lastError));\n\tSet_PWM(1, 792 - error*1100 - 1100*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu34", "width":150,"length":80,"NumberOfSensors":7,"SensorSpacing":15,"BodyColour":"ff0000","WheelColour":"444444","LEDColour":"red","Code":"int error = 0;\r\nint lastError = 0;\r\n\r\nvoid RobotControl()\r\n{\r\n\tif(an[0] > black_threshold)\r\n\t\terror = -3;\r\n\telse if(an[1] > black_threshold)\r\n\t\terror = -2;\r\n\telse if(an[2] > black_threshold)\r\n\t\terror = -1;\r\n\telse if(an[3] > black_threshold)\r\n\t\terror = 0;\r\n\telse if(an[4] > black_threshold)\r\n\t\terror = 1;\r\n\telse if(an[5] > black_threshold)\r\n\t\terror = 2;\r\n\telse if(an[6] > black_threshold)\r\n\t\terror = 3;\r\n\r\nSet_PWM(0, 5500 + error*2000 + 40000*(error - lastError));\r\nSet_PWM(1, 5500 - error*2000 - 40000*(error - lastError));\r\nlastError = error;\r\n}\r\n"}, 
{"ID":"stu80", "width":80,"length":90,"NumberOfSensors":3,"SensorSpacing":10,"BodyColour":"7a0076","WheelColour":"010047","LEDColour":"green","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n        \n\tSet_PWM(0, 840 + error*730 + 1620*(error - lastError));\n\tSet_PWM(1, 840 - error*730 - 1620*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu58", "width":70,"length":150,"NumberOfSensors":5,"SensorSpacing":17,"BodyColour":"ffffff","WheelColour":"444444","LEDColour":"yellow","Code":"\nint error = 0;\nint lastError = 0;\n\nvoid RobotControl(){\n\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold && an[3] <= black_threshold && an[4] <= black_threshold)\n\t{\n\t    error = 0;\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] > black_threshold && an[2] > black_threshold && an[3] <= black_threshold && an[4] <= black_threshold)\n\t{\n\t     error = 1;\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] > black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] <= black_threshold)\n\t{\n\t     error = 2;\n\t}\n\t\n\tif(an[0] > black_threshold && an[1] > black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] <= black_threshold)\n\t{\n\t     error = 3;\n\t}\n\t\n\tif(an[0] > black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] <= black_threshold && an[4] <= black_threshold)\n\t{\n\t     error = 4;\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold && an[3] > black_threshold && an[4] <= black_threshold)\n\t{\n\t     error = -1;\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] > black_threshold && an[4] <= black_threshold)\n\t{\n\t     error = -2;\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] <= black_threshold && an[3] > black_threshold && an[4] > black_threshold)\n\t{\n\t     error = -3;\n\t}\n\t\n\tif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold && an[3] <= black_threshold && an[4] > black_threshold)\n\t{\n\t     error = -4;\n\t}\n\tSet_PWM(1, 4000 + error*2300 + 6500*(error - lastError));\n\tSet_PWM(0, 4000 - error*2300 - 6500*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu37", "width":60,"length":160,"NumberOfSensors":3,"SensorSpacing":15,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"int error = 0;\r\nint lastError = 0;\r\nvoid RobotControl()\r\n{\r\nif(an[0] > black_threshold)\r\nerror = -1;\r\nelse if(an[1] > black_threshold)\r\nerror = 0;\r\nelse if(an[2] > black_threshold)\r\nerror = 1;\r\nSet_PWM(0, 1250 + error*2625 + 900*(error - lastError));\r\nSet_PWM(1, 1250 - error*2625 - 900*(error - lastError));\r\nlastError = error;\r\n}\r\n"},
{"ID":"stu60", "width":119,"length":120,"NumberOfSensors":4,"SensorSpacing":10,"BodyColour":"00ffcc","WheelColour":"000000","LEDColour":"red","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n    else if(an[3] > black_threshold)\n        error = 2; \n\n        \n\tSet_PWM(0, 650 + error*640 + 1020*(error - lastError));\n\tSet_PWM(1, 650 - error*640 - 1020*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu48", "width":101,"length":149,"NumberOfSensors":3,"SensorSpacing":22,"BodyColour":"f00c00","WheelColour":"014700","LEDColour":"blue","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n        \n\tSet_PWM(0, 999 + error*1099 + 3199*(error - lastError));\n\tSet_PWM(1, 999 - error*1099 - 3199*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu28", "width":75,"length":100,"NumberOfSensors":3,"SensorSpacing":15,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"green","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n\t    if(an[0] > black_threshold)\n        error= -1 ;\t\n\t    else if(an[1] > black_threshold)\n\t    error= 0 ;\n        else if(an[2] > black_threshold)\n\t    error= 1;\n\t\n\t\tSet_PWM(0, 850 + error*750 + 1700* (error - lastError) );\t\n\t\tSet_PWM(1, 850 - error*750 - 1700* (error - lastError) );\t\n\n        lastError = error;\t\n}\n\n\t\t\t"}, 
{"ID":"stu68", "width":165,"length":140,"NumberOfSensors":5,"SensorSpacing":13,"BodyColour":"822121","WheelColour":"171618","LEDColour":"red","Code":"int error = 0;\nint lastError = 0.26;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -10;\n    else if(an[1] > black_threshold)\n        error = -6.5;\n    else if(an[2] > black_threshold)\n        error = 1.2;\n    else if(an[3] > black_threshold)\n        error = 7.5;\n    else if(an[4] > black_threshold)\n        error = 10;\n  \n\tSet_PWM(0, 1100 + error*120 + 900*(error - lastError));\n\tSet_PWM(1, 1100 - error*120 - 900*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu31", "width":135,"length":154,"NumberOfSensors":2,"SensorSpacing":15,"BodyColour":"ff00e1","WheelColour":"ffffff","LEDColour":"red","Code":"void RobotControl()\n{\nif(an[0] > black_threshold && an[1] > black_threshold)\n    {\n        Set_PWM(0, 750);\n        Set_PWM(1, 750);\n    }\nif(an[0] > black_threshold && an[1] <= black_threshold)\n    {\n        Set_PWM(0, 100);\n        Set_PWM(1, 350);\n    }\nif(an[0] <= black_threshold && an[1] > black_threshold)\n    {\n        Set_PWM(0, 350);\n        Set_PWM(1, 100);\n    }\n}"}, 
{"ID":"stu54", "width":80,"length":100,"NumberOfSensors":4,"SensorSpacing":15,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"int fault = 0;\nint lastfault = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        fault = -2;\n    else if(an[1] > black_threshold)\n        fault = -1;\n    else if(an[2] > black_threshold)\n        fault = 1;\n    else if(an[3] > black_threshold)\n        fault = 2;\n\tSet_PWM(0, 1488 + fault*700 + 2550*(fault - lastfault));\n\tSet_PWM(1, 1488 - fault*700 - 2550*(fault - lastfault));\n\t\n\tlastfault = fault;\n}\n"}, 
{"ID":"stu19", "width":115,"length":120,"NumberOfSensors":3,"SensorSpacing":20,"BodyColour":"cf2020","WheelColour":"444444","LEDColour":"red","Code":"void RobotControl()\r\n{\r\n    if(an[0] > black_threshold && an[1] > black_threshold && an[2] <= black_threshold)\r\n {\r\nSet_PWM(0, 160);\r\nSet_PWM(1, 500);\r\n}\r\nif(an[0] > black_threshold && an[1] <= black_threshold && an[2] <= black_threshold) \r\n{\r\nSet_PWM(0, 0);\r\nSet_PWM(1, 550);\r\n}\r\nif(an[0] <= black_threshold && an[1] > black_threshold && an[2] > black_threshold) \r\n{\r\nSet_PWM(0, 500);\r\nSet_PWM(1, 160);\r\n}\r\nif(an[0] <= black_threshold && an[1] > black_threshold && an[2] <= black_threshold)\r\n {\r\nSet_PWM(0, 500);\r\nSet_PWM(1, 500);\r\n}\r\nif(an[0] <= black_threshold && an[1] <= black_threshold && an[2] > black_threshold) \r\n{\r\nSet_PWM(0, 550);\r\nSet_PWM(1, 0);\r\n}\r\n}"}, 
{"ID":"stu16", "width":117,"length":125,"NumberOfSensors":5,"SensorSpacing":16,"BodyColour":"41adc8","WheelColour":"bbd246","LEDColour":"red","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n         else if(an[3] > black_threshold)\n        error = 2;\n         else if(an[4] > black_threshold)\n        error = 3;\n        \n        \n\tSet_PWM(0, 480 + error*300 + 900*(error - lastError));\n\tSet_PWM(1, 480 - error*300 - 900*(error - lastError));\n\t\n\tlastError = error;\n}\n\t\t\t"}, 
{"ID":"stu79", "width":90,"length":100,"NumberOfSensors":3,"SensorSpacing":20,"BodyColour":"2070d0","WheelColour":"444444","LEDColour":"red","Code":"int error = 0;\nint lastError = 0;\n\nvoid RobotControl()\n{\n    if(an[0] > black_threshold)\n        error = -1;\n    else if(an[1] > black_threshold)\n        error = 0;\n    else if(an[2] > black_threshold)\n        error = 1;\n    \n    Set_PWM(0, 525 + error*500 + 1000*(error - lastError));\n    Set_PWM(1, 525 - error*500 - 1000*(error - lastError));\n    \n    lastError = error;\n}\n"}]
